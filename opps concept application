# Lab-5
// Encapsulation: Data hiding
class Person {
    private String name;
    private int age;

    public Person(String name, int age) {
        this.name = name;
        this.age = age;
    }

    public String getName() {
        return name;
    }

    public int getAge() {
        return age;
    }
}

// Inheritance: Parent class
class Employee extends Person {
    private double salary;

    public Employee(String name, int age, double salary) {
        super(name, age);
        this.salary = salary;
    }

    public double getSalary() {
        return salary;
    }
}

// Polymorphism: Method overriding
class Student extends Person {
    private String school;

    public Student(String name, int age, String school) {
        super(name, age);
        this.school = school;
    }

    @Override
    public String getName() {
        return "Student: " + super.getName();
    }
}

// Abstraction: Abstract class
abstract class Shape {
    abstract double area();
}

// Abstraction: Interface
interface Drawable {
    void draw();
}

// Inheritance: Multiple inheritance through interfaces
class Circle extends Shape implements Drawable {
    private double radius;

    public Circle(double radius) {
        this.radius = radius;
    }

    @Override
    double area() {
        return Math.PI * radius * radius;
    }

    @Override
    public void draw() {
        System.out.println("Drawing Circle");
    }
}

public class Main {
    public static void main(String[] args) {
        // Encapsulation
        Person person = new Person("Alice", 30);
        System.out.println("Name: " + person.getName());
        System.out.println("Age: " + person.getAge());

        // Inheritance
        Employee employee = new Employee("Bob", 35, 50000);
        System.out.println("Employee Name: " + employee.getName());
        System.out.println("Employee Age: " + employee.getAge());
        System.out.println("Employee Salary: " + employee.getSalary());

        // Polymorphism
        Person student = new Student("Charlie", 20, "XYZ University");
        System.out.println(student.getName());

        // Abstraction
        Shape circle = new Circle(5);
        System.out.println("Area of Circle: " + circle.area());
        ((Drawable) circle).draw(); // Casting to Drawable to call draw() method
    }
}
